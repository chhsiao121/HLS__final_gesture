// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dilation_accel_dilate_0_0_32_32_2_3_3_1_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_mat_419_dout,
        in_mat_419_empty_n,
        in_mat_419_read,
        out_mat_420_din,
        out_mat_420_full_n,
        out_mat_420_write,
        m_axi_gmem3_AWVALID,
        m_axi_gmem3_AWREADY,
        m_axi_gmem3_AWADDR,
        m_axi_gmem3_AWID,
        m_axi_gmem3_AWLEN,
        m_axi_gmem3_AWSIZE,
        m_axi_gmem3_AWBURST,
        m_axi_gmem3_AWLOCK,
        m_axi_gmem3_AWCACHE,
        m_axi_gmem3_AWPROT,
        m_axi_gmem3_AWQOS,
        m_axi_gmem3_AWREGION,
        m_axi_gmem3_AWUSER,
        m_axi_gmem3_WVALID,
        m_axi_gmem3_WREADY,
        m_axi_gmem3_WDATA,
        m_axi_gmem3_WSTRB,
        m_axi_gmem3_WLAST,
        m_axi_gmem3_WID,
        m_axi_gmem3_WUSER,
        m_axi_gmem3_ARVALID,
        m_axi_gmem3_ARREADY,
        m_axi_gmem3_ARADDR,
        m_axi_gmem3_ARID,
        m_axi_gmem3_ARLEN,
        m_axi_gmem3_ARSIZE,
        m_axi_gmem3_ARBURST,
        m_axi_gmem3_ARLOCK,
        m_axi_gmem3_ARCACHE,
        m_axi_gmem3_ARPROT,
        m_axi_gmem3_ARQOS,
        m_axi_gmem3_ARREGION,
        m_axi_gmem3_ARUSER,
        m_axi_gmem3_RVALID,
        m_axi_gmem3_RREADY,
        m_axi_gmem3_RDATA,
        m_axi_gmem3_RLAST,
        m_axi_gmem3_RID,
        m_axi_gmem3_RUSER,
        m_axi_gmem3_RRESP,
        m_axi_gmem3_BVALID,
        m_axi_gmem3_BREADY,
        m_axi_gmem3_BRESP,
        m_axi_gmem3_BID,
        m_axi_gmem3_BUSER,
        p_src_rows_dout,
        p_src_rows_empty_n,
        p_src_rows_read,
        p_src_cols_dout,
        p_src_cols_empty_n,
        p_src_cols_read,
        p_kernel_dout,
        p_kernel_empty_n,
        p_kernel_read
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_pp0_stage0 = 11'd256;
parameter    ap_ST_fsm_state11 = 11'd512;
parameter    ap_ST_fsm_state12 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] in_mat_419_dout;
input   in_mat_419_empty_n;
output   in_mat_419_read;
output  [7:0] out_mat_420_din;
input   out_mat_420_full_n;
output   out_mat_420_write;
output   m_axi_gmem3_AWVALID;
input   m_axi_gmem3_AWREADY;
output  [63:0] m_axi_gmem3_AWADDR;
output  [0:0] m_axi_gmem3_AWID;
output  [31:0] m_axi_gmem3_AWLEN;
output  [2:0] m_axi_gmem3_AWSIZE;
output  [1:0] m_axi_gmem3_AWBURST;
output  [1:0] m_axi_gmem3_AWLOCK;
output  [3:0] m_axi_gmem3_AWCACHE;
output  [2:0] m_axi_gmem3_AWPROT;
output  [3:0] m_axi_gmem3_AWQOS;
output  [3:0] m_axi_gmem3_AWREGION;
output  [0:0] m_axi_gmem3_AWUSER;
output   m_axi_gmem3_WVALID;
input   m_axi_gmem3_WREADY;
output  [7:0] m_axi_gmem3_WDATA;
output  [0:0] m_axi_gmem3_WSTRB;
output   m_axi_gmem3_WLAST;
output  [0:0] m_axi_gmem3_WID;
output  [0:0] m_axi_gmem3_WUSER;
output   m_axi_gmem3_ARVALID;
input   m_axi_gmem3_ARREADY;
output  [63:0] m_axi_gmem3_ARADDR;
output  [0:0] m_axi_gmem3_ARID;
output  [31:0] m_axi_gmem3_ARLEN;
output  [2:0] m_axi_gmem3_ARSIZE;
output  [1:0] m_axi_gmem3_ARBURST;
output  [1:0] m_axi_gmem3_ARLOCK;
output  [3:0] m_axi_gmem3_ARCACHE;
output  [2:0] m_axi_gmem3_ARPROT;
output  [3:0] m_axi_gmem3_ARQOS;
output  [3:0] m_axi_gmem3_ARREGION;
output  [0:0] m_axi_gmem3_ARUSER;
input   m_axi_gmem3_RVALID;
output   m_axi_gmem3_RREADY;
input  [7:0] m_axi_gmem3_RDATA;
input   m_axi_gmem3_RLAST;
input  [0:0] m_axi_gmem3_RID;
input  [0:0] m_axi_gmem3_RUSER;
input  [1:0] m_axi_gmem3_RRESP;
input   m_axi_gmem3_BVALID;
output   m_axi_gmem3_BREADY;
input  [1:0] m_axi_gmem3_BRESP;
input  [0:0] m_axi_gmem3_BID;
input  [0:0] m_axi_gmem3_BUSER;
input  [31:0] p_src_rows_dout;
input   p_src_rows_empty_n;
output   p_src_rows_read;
input  [31:0] p_src_cols_dout;
input   p_src_cols_empty_n;
output   p_src_cols_read;
input  [63:0] p_kernel_dout;
input   p_kernel_empty_n;
output   p_kernel_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_mat_419_read;
reg out_mat_420_write;
reg m_axi_gmem3_ARVALID;
reg m_axi_gmem3_RREADY;
reg p_src_rows_read;
reg p_src_cols_read;
reg p_kernel_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem3_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem3_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln383_reg_412;
reg    p_src_rows_blk_n;
reg    p_src_cols_blk_n;
reg    p_kernel_blk_n;
reg   [3:0] indvar_flatten_reg_144;
reg   [1:0] i_reg_155;
reg   [1:0] j_reg_166;
reg   [31:0] p_src_rows_read_reg_391;
reg   [31:0] p_src_cols_read_reg_396;
reg   [63:0] gmem3_addr_reg_401;
wire   [3:0] add_ln383_fu_202_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln383_fu_208_p2;
wire   [1:0] select_ln383_fu_220_p3;
reg   [1:0] select_ln383_reg_416;
wire   [1:0] select_ln383_1_fu_234_p3;
reg   [1:0] select_ln383_1_reg_420;
wire   [1:0] add_ln384_fu_242_p2;
wire   [15:0] trunc_ln340_fu_329_p1;
reg   [15:0] trunc_ln340_reg_457;
wire    ap_CS_fsm_state11;
wire   [15:0] trunc_ln341_fu_333_p1;
reg   [15:0] trunc_ln341_reg_462;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
wire    grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_start;
wire    grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_done;
wire    grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_idle;
wire    grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_ready;
wire    grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_in_mat_419_read;
wire   [7:0] grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_out_mat_420_din;
wire    grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_out_mat_420_write;
reg   [1:0] ap_phi_mux_i_phi_fu_159_p4;
reg    grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_start_reg;
wire    ap_CS_fsm_state12;
reg   [7:0] kernel_2_2_fu_78;
reg   [7:0] kernel_2_2_1_fu_82;
reg   [7:0] kernel_2_2_2_fu_86;
reg   [7:0] kernel_2_2_3_fu_90;
reg   [7:0] kernel_2_2_4_fu_94;
reg   [7:0] kernel_2_2_5_fu_98;
reg   [7:0] kernel_2_2_6_fu_102;
reg   [7:0] kernel_2_2_7_fu_106;
reg   [7:0] kernel_2_2_8_fu_110;
reg    ap_block_state1;
wire   [0:0] icmp_ln384_fu_214_p2;
wire   [1:0] add_ln383_1_fu_228_p2;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_start_reg = 1'b0;
end

dilation_accel_xfdilate_32_32_1_0_1_0_33_3_3_s grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_start),
    .ap_done(grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_done),
    .ap_idle(grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_idle),
    .ap_ready(grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_ready),
    .in_mat_419_dout(in_mat_419_dout),
    .in_mat_419_empty_n(in_mat_419_empty_n),
    .in_mat_419_read(grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_in_mat_419_read),
    .out_mat_420_din(grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_out_mat_420_din),
    .out_mat_420_full_n(out_mat_420_full_n),
    .out_mat_420_write(grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_out_mat_420_write),
    .img_height(trunc_ln340_reg_457),
    .img_width(trunc_ln341_reg_462),
    .p_read(kernel_2_2_fu_78),
    .p_read1(kernel_2_2_1_fu_82),
    .p_read2(kernel_2_2_2_fu_86),
    .p_read3(kernel_2_2_3_fu_90),
    .p_read4(kernel_2_2_4_fu_94),
    .p_read5(kernel_2_2_5_fu_98),
    .p_read6(kernel_2_2_6_fu_102),
    .p_read7(kernel_2_2_7_fu_106),
    .p_read8(kernel_2_2_8_fu_110)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_start_reg <= 1'b1;
        end else if ((grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_ready == 1'b1)) begin
            grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln383_reg_412 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_155 <= select_ln383_1_reg_420;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_155 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln383_fu_208_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_144 <= add_ln383_fu_202_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten_reg_144 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln383_fu_208_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_166 <= add_ln384_fu_242_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_166 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        gmem3_addr_reg_401 <= p_kernel_dout;
        p_src_cols_read_reg_396 <= p_src_cols_dout;
        p_src_rows_read_reg_391 <= p_src_rows_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln383_reg_412 <= icmp_ln383_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln383_1_reg_420 == 2'd0) & (select_ln383_reg_416 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_1_fu_82 <= m_axi_gmem3_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln383_reg_416 == 2'd1) & ~(select_ln383_reg_416 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln383_1_reg_420 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_2_fu_86 <= m_axi_gmem3_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln383_1_reg_420 == 2'd1) & (select_ln383_reg_416 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_3_fu_90 <= m_axi_gmem3_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln383_1_reg_420 == 2'd1) & (select_ln383_reg_416 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_4_fu_94 <= m_axi_gmem3_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln383_reg_416 == 2'd1) & ~(select_ln383_reg_416 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln383_1_reg_420 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_5_fu_98 <= m_axi_gmem3_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln383_1_reg_420 == 2'd1) & ~(select_ln383_1_reg_420 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln383_reg_416 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_6_fu_102 <= m_axi_gmem3_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln383_1_reg_420 == 2'd1) & ~(select_ln383_1_reg_420 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln383_reg_416 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_7_fu_106 <= m_axi_gmem3_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln383_1_reg_420 == 2'd1) & ~(select_ln383_reg_416 == 2'd1) & ~(select_ln383_reg_416 == 2'd0) & ~(select_ln383_1_reg_420 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_8_fu_110 <= m_axi_gmem3_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln383_1_reg_420 == 2'd0) & (select_ln383_reg_416 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_fu_78 <= m_axi_gmem3_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln383_fu_208_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln383_1_reg_420 <= select_ln383_1_fu_234_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln383_fu_208_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln383_reg_416 <= select_ln383_fu_220_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        trunc_ln340_reg_457 <= trunc_ln340_fu_329_p1;
        trunc_ln341_reg_462 <= trunc_ln341_fu_333_p1;
    end
end

always @ (*) begin
    if ((icmp_ln383_fu_208_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln383_reg_412 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_159_p4 = select_ln383_1_reg_420;
    end else begin
        ap_phi_mux_i_phi_fu_159_p4 = i_reg_155;
    end
end

always @ (*) begin
    if (((grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem3_blk_n_AR = m_axi_gmem3_ARREADY;
    end else begin
        gmem3_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln383_reg_412 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        gmem3_blk_n_R = m_axi_gmem3_RVALID;
    end else begin
        gmem3_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        in_mat_419_read = grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_in_mat_419_read;
    end else begin
        in_mat_419_read = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem3_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem3_ARVALID = 1'b1;
    end else begin
        m_axi_gmem3_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln383_reg_412 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_axi_gmem3_RREADY = 1'b1;
    end else begin
        m_axi_gmem3_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        out_mat_420_write = grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_out_mat_420_write;
    end else begin
        out_mat_420_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_kernel_blk_n = p_kernel_empty_n;
    end else begin
        p_kernel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (p_kernel_empty_n == 1'b0) | (p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_kernel_read = 1'b1;
    end else begin
        p_kernel_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_blk_n = p_src_cols_empty_n;
    end else begin
        p_src_cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (p_kernel_empty_n == 1'b0) | (p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_read = 1'b1;
    end else begin
        p_src_cols_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_blk_n = p_src_rows_empty_n;
    end else begin
        p_src_rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (p_kernel_empty_n == 1'b0) | (p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_read = 1'b1;
    end else begin
        p_src_rows_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (p_kernel_empty_n == 1'b0) | (p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_gmem3_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln383_fu_208_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln383_fu_208_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln383_1_fu_228_p2 = (ap_phi_mux_i_phi_fu_159_p4 + 2'd1);

assign add_ln383_fu_202_p2 = (indvar_flatten_reg_144 + 4'd1);

assign add_ln384_fu_242_p2 = (select_ln383_fu_220_p3 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_gmem3_RVALID == 1'b0) & (icmp_ln383_reg_412 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_gmem3_RVALID == 1'b0) & (icmp_ln383_reg_412 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (p_kernel_empty_n == 1'b0) | (p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((m_axi_gmem3_RVALID == 1'b0) & (icmp_ln383_reg_412 == 1'd0));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_start = grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_ap_start_reg;

assign icmp_ln383_fu_208_p2 = ((indvar_flatten_reg_144 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln384_fu_214_p2 = ((j_reg_166 == 2'd3) ? 1'b1 : 1'b0);

assign m_axi_gmem3_ARADDR = gmem3_addr_reg_401;

assign m_axi_gmem3_ARBURST = 2'd0;

assign m_axi_gmem3_ARCACHE = 4'd0;

assign m_axi_gmem3_ARID = 1'd0;

assign m_axi_gmem3_ARLEN = 32'd9;

assign m_axi_gmem3_ARLOCK = 2'd0;

assign m_axi_gmem3_ARPROT = 3'd0;

assign m_axi_gmem3_ARQOS = 4'd0;

assign m_axi_gmem3_ARREGION = 4'd0;

assign m_axi_gmem3_ARSIZE = 3'd0;

assign m_axi_gmem3_ARUSER = 1'd0;

assign m_axi_gmem3_AWADDR = 64'd0;

assign m_axi_gmem3_AWBURST = 2'd0;

assign m_axi_gmem3_AWCACHE = 4'd0;

assign m_axi_gmem3_AWID = 1'd0;

assign m_axi_gmem3_AWLEN = 32'd0;

assign m_axi_gmem3_AWLOCK = 2'd0;

assign m_axi_gmem3_AWPROT = 3'd0;

assign m_axi_gmem3_AWQOS = 4'd0;

assign m_axi_gmem3_AWREGION = 4'd0;

assign m_axi_gmem3_AWSIZE = 3'd0;

assign m_axi_gmem3_AWUSER = 1'd0;

assign m_axi_gmem3_AWVALID = 1'b0;

assign m_axi_gmem3_BREADY = 1'b0;

assign m_axi_gmem3_WDATA = 8'd0;

assign m_axi_gmem3_WID = 1'd0;

assign m_axi_gmem3_WLAST = 1'b0;

assign m_axi_gmem3_WSTRB = 1'd0;

assign m_axi_gmem3_WUSER = 1'd0;

assign m_axi_gmem3_WVALID = 1'b0;

assign out_mat_420_din = grp_xfdilate_32_32_1_0_1_0_33_3_3_s_fu_177_out_mat_420_din;

assign select_ln383_1_fu_234_p3 = ((icmp_ln384_fu_214_p2[0:0] == 1'b1) ? add_ln383_1_fu_228_p2 : ap_phi_mux_i_phi_fu_159_p4);

assign select_ln383_fu_220_p3 = ((icmp_ln384_fu_214_p2[0:0] == 1'b1) ? 2'd0 : j_reg_166);

assign trunc_ln340_fu_329_p1 = p_src_rows_read_reg_391[15:0];

assign trunc_ln341_fu_333_p1 = p_src_cols_read_reg_396[15:0];

endmodule //dilation_accel_dilate_0_0_32_32_2_3_3_1_1_s
