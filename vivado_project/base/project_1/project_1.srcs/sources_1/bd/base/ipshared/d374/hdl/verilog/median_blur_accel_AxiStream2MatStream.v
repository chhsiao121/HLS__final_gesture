// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module median_blur_accel_AxiStream2MatStream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ldata1_dout,
        ldata1_empty_n,
        ldata1_read,
        imgInput_419_din,
        imgInput_419_full_n,
        imgInput_419_write,
        rows_dout,
        rows_empty_n,
        rows_read,
        cols_bound_per_npc_dout,
        cols_bound_per_npc_empty_n,
        cols_bound_per_npc_read,
        last_blk_width_dout,
        last_blk_width_empty_n,
        last_blk_width_read
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state9 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] ldata1_dout;
input   ldata1_empty_n;
output   ldata1_read;
output  [23:0] imgInput_419_din;
input   imgInput_419_full_n;
output   imgInput_419_write;
input  [31:0] rows_dout;
input   rows_empty_n;
output   rows_read;
input  [31:0] cols_bound_per_npc_dout;
input   cols_bound_per_npc_empty_n;
output   cols_bound_per_npc_read;
input  [3:0] last_blk_width_dout;
input   last_blk_width_empty_n;
output   last_blk_width_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ldata1_read;
reg imgInput_419_write;
reg rows_read;
reg cols_bound_per_npc_read;
reg last_blk_width_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ldata1_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1073_reg_809;
reg   [0:0] icmp_ln1073_reg_809_pp0_iter1_reg;
reg   [0:0] icmp_ln1084_reg_830;
reg    imgInput_419_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln1104_reg_821;
reg   [0:0] icmp_ln1104_reg_821_pp0_iter3_reg;
reg    rows_blk_n;
reg    cols_bound_per_npc_blk_n;
reg    last_blk_width_blk_n;
reg   [31:0] j_reg_135;
reg   [30:0] i_reg_146;
reg  signed [31:0] rows_read_reg_761;
reg  signed [31:0] cols_bound_per_npc_read_reg_766;
reg  signed [3:0] last_blk_width_read_reg_773;
wire  signed [4:0] last_blk_width_cast1_cast_i_cast_cast_cast_fu_190_p1;
reg  signed [4:0] last_blk_width_cast1_cast_i_cast_cast_cast_reg_779;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_186_p2;
reg   [31:0] bound_reg_784;
wire   [31:0] sub_i_fu_197_p2;
reg   [31:0] sub_i_reg_789;
wire   [5:0] sub4_i_fu_202_p2;
reg   [5:0] sub4_i_reg_794;
wire   [5:0] add_ln1093_fu_208_p2;
reg   [5:0] add_ln1093_reg_799;
wire   [30:0] add_ln1073_fu_214_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
reg    ap_predicate_op103_read_state6;
reg    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
reg    ap_block_state8_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1073_fu_224_p2;
reg   [0:0] icmp_ln1073_reg_809_pp0_iter2_reg;
wire   [0:0] bLast_fu_229_p2;
reg   [0:0] bLast_reg_813;
reg   [0:0] bLast_reg_813_pp0_iter1_reg;
reg   [0:0] bLast_reg_813_pp0_iter2_reg;
reg   [0:0] bLast_reg_813_pp0_iter3_reg;
wire   [0:0] icmp_ln1104_fu_234_p2;
reg   [0:0] icmp_ln1104_reg_821_pp0_iter1_reg;
reg   [0:0] icmp_ln1104_reg_821_pp0_iter2_reg;
wire   [31:0] j_2_fu_245_p3;
wire   [0:0] icmp_ln1084_fu_285_p2;
reg   [0:0] icmp_ln1084_reg_830_pp0_iter2_reg;
wire   [0:0] icmp_ln674_1_fu_307_p2;
reg   [0:0] icmp_ln674_1_reg_834;
wire   [5:0] trunc_ln674_1_fu_313_p1;
reg   [5:0] trunc_ln674_1_reg_840;
wire   [5:0] sub_ln674_7_fu_341_p2;
reg   [5:0] sub_ln674_7_reg_846;
reg   [5:0] sub_ln674_7_reg_846_pp0_iter2_reg;
wire   [0:0] icmp_ln1085_fu_358_p2;
reg   [0:0] icmp_ln1085_reg_851;
reg   [0:0] icmp_ln1085_reg_851_pp0_iter2_reg;
wire   [4:0] trunc_ln1086_fu_364_p1;
reg   [4:0] trunc_ln1086_reg_856;
wire   [0:0] icmp_ln674_fu_378_p2;
reg   [0:0] icmp_ln674_reg_861;
wire   [5:0] trunc_ln674_fu_384_p1;
reg   [5:0] trunc_ln674_reg_868;
wire   [5:0] add_ln674_1_fu_408_p2;
reg   [5:0] add_ln674_1_reg_875;
reg   [5:0] add_ln674_1_reg_875_pp0_iter2_reg;
wire   [0:0] icmp_ln414_fu_414_p2;
reg   [0:0] icmp_ln414_reg_880;
reg   [0:0] icmp_ln414_reg_880_pp0_iter2_reg;
wire   [4:0] trunc_ln414_fu_420_p1;
reg   [4:0] trunc_ln414_reg_888;
reg   [4:0] trunc_ln414_reg_888_pp0_iter2_reg;
wire   [4:0] trunc_ln414_1_fu_424_p1;
reg   [4:0] trunc_ln414_1_reg_896;
wire   [31:0] lshr_ln674_3_fu_474_p2;
reg   [31:0] lshr_ln674_3_reg_902;
wire   [5:0] sub_ln674_2_fu_515_p2;
reg   [5:0] sub_ln674_2_reg_907;
wire   [31:0] lshr_ln674_fu_525_p2;
reg   [31:0] lshr_ln674_reg_912;
wire   [4:0] sub_ln414_fu_531_p2;
reg   [4:0] sub_ln414_reg_917;
reg   [31:0] tmp_16_reg_922;
wire   [4:0] sub_ln414_1_fu_536_p2;
reg   [4:0] sub_ln414_1_reg_927;
wire   [23:0] and_ln414_fu_577_p2;
reg   [23:0] and_ln414_reg_932;
wire   [23:0] localbuffer_V_6_fu_602_p1;
wire   [23:0] p_Result_30_fu_712_p2;
wire   [4:0] sub_ln674_8_fu_718_p2;
reg   [4:0] sub_ln674_8_reg_948;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
wire   [23:0] ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_157;
reg   [23:0] ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_157;
reg   [23:0] ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_157;
reg   [23:0] ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_157;
reg   [23:0] ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_157;
reg   [31:0] rem_fu_96;
wire   [31:0] rem_2_fu_347_p2;
wire   [31:0] rem_1_fu_428_p2;
reg    ap_block_state1;
reg   [31:0] p_Val2_s_fu_100;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state2;
wire   [5:0] last_blk_width_cast1_cast_i_cast_cast_cast_cast_fu_193_p1;
wire   [31:0] zext_ln1053_fu_220_p1;
wire   [31:0] add_ln1105_fu_239_p2;
wire   [3:0] xf_bits_per_clock_fu_257_p3;
wire  signed [4:0] sext_ln1079_fu_263_p1;
wire   [5:0] ptr_width_minus_fu_275_p3;
wire   [31:0] zext_ln1079_fu_267_p1;
wire   [5:0] select_ln1093_fu_291_p3;
wire   [31:0] zext_ln1093_fu_297_p1;
wire   [31:0] grp_fu_166_p2;
wire   [31:0] sub_ln1093_fu_301_p2;
wire   [5:0] trunc_ln674_2_fu_317_p1;
wire   [5:0] sub_ln674_4_fu_321_p2;
wire   [5:0] sub_ln674_6_fu_327_p2;
wire   [5:0] select_ln674_3_fu_333_p3;
wire   [26:0] tmp_fu_368_p4;
wire   [5:0] zext_ln1079_1_fu_271_p1;
wire  signed [5:0] add_ln1090_fu_388_p2;
wire   [5:0] trunc_ln1090_fu_398_p1;
wire   [5:0] sub_ln674_3_fu_402_p2;
wire  signed [31:0] sext_ln1090_fu_394_p1;
wire   [31:0] zext_ln1080_fu_281_p1;
reg   [31:0] tmp_14_fu_442_p4;
wire   [5:0] sub_ln674_5_fu_452_p2;
wire   [5:0] select_ln674_5_fu_464_p3;
wire   [31:0] select_ln674_4_fu_457_p3;
wire   [31:0] zext_ln674_3_fu_470_p1;
wire   [5:0] add_ln674_fu_490_p2;
wire   [5:0] grp_fu_171_p2;
reg   [31:0] tmp_9_fu_480_p4;
wire   [5:0] select_ln674_fu_495_p3;
wire   [5:0] select_ln674_2_fu_509_p3;
wire   [31:0] select_ln674_1_fu_502_p3;
wire   [31:0] zext_ln674_fu_521_p1;
wire   [4:0] select_ln414_fu_541_p3;
wire   [4:0] select_ln414_1_fu_546_p3;
wire   [4:0] sub_ln414_2_fu_551_p2;
wire   [23:0] zext_ln414_2_fu_557_p1;
wire   [23:0] zext_ln414_3_fu_561_p1;
wire   [23:0] shl_ln414_1_fu_565_p2;
wire   [23:0] lshr_ln414_1_fu_571_p2;
wire   [31:0] zext_ln674_4_fu_588_p1;
wire   [31:0] lshr_ln674_4_fu_591_p2;
wire   [31:0] p_Result_31_fu_597_p2;
wire   [31:0] zext_ln674_1_fu_606_p1;
wire   [31:0] lshr_ln674_1_fu_609_p2;
wire   [31:0] p_Result_s_fu_615_p2;
wire   [23:0] zext_ln414_fu_624_p1;
wire   [23:0] tmp_15_fu_620_p1;
wire   [23:0] lshr_ln414_fu_627_p2;
wire   [23:0] p_Result_28_fu_633_p2;
wire   [31:0] zext_ln674_2_fu_646_p1;
wire   [31:0] lshr_ln674_2_fu_649_p2;
wire   [31:0] p_Result_29_fu_655_p2;
wire   [4:0] select_ln414_2_fu_664_p3;
wire   [23:0] tmp_17_fu_660_p1;
wire   [23:0] zext_ln414_1_fu_669_p1;
wire   [23:0] shl_ln414_fu_673_p2;
reg   [23:0] tmp_13_fu_679_p4;
wire   [23:0] localbuffer_V_fu_639_p3;
wire   [23:0] xor_ln414_fu_696_p2;
wire   [23:0] select_ln414_3_fu_689_p3;
wire   [23:0] and_ln414_1_fu_701_p2;
wire   [23:0] and_ln414_2_fu_707_p2;
wire   [23:0] zext_ln674_5_fu_723_p1;
wire   [23:0] lshr_ln674_5_fu_726_p2;
wire   [23:0] select_ln1078_fu_732_p3;
wire    ap_CS_fsm_state9;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

median_blur_accel_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(cols_bound_per_npc_read_reg_766),
    .din1(rows_read_reg_761),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if (((icmp_ln1084_reg_830_pp0_iter2_reg == 1'd0) & (icmp_ln1073_reg_809_pp0_iter2_reg == 1'd1))) begin
            ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_157 <= localbuffer_V_6_fu_602_p1;
        end else if (((icmp_ln1084_reg_830_pp0_iter2_reg == 1'd1) & (icmp_ln1073_reg_809_pp0_iter2_reg == 1'd1))) begin
            ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_157 <= p_Result_30_fu_712_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_157 <= ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_157;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1073_fu_224_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_146 <= add_ln1073_fu_214_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_146 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1073_fu_224_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_reg_135 <= j_2_fu_245_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_135 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_fu_100 <= 32'd0;
    end else if (((icmp_ln1084_reg_830 == 1'd1) & (icmp_ln1073_reg_809_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_Val2_s_fu_100 <= ldata1_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rem_fu_96 <= 32'd0;
    end else if (((icmp_ln1073_reg_809 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1084_fu_285_p2 == 1'd1))) begin
        rem_fu_96 <= rem_1_fu_428_p2;
    end else if (((icmp_ln1073_reg_809 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1084_fu_285_p2 == 1'd0))) begin
        rem_fu_96 <= rem_2_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln1093_reg_799 <= add_ln1093_fu_208_p2;
        bound_reg_784 <= grp_fu_186_p2;
        last_blk_width_cast1_cast_i_cast_cast_cast_reg_779 <= last_blk_width_cast1_cast_i_cast_cast_cast_fu_190_p1;
        sub4_i_reg_794 <= sub4_i_fu_202_p2;
        sub_i_reg_789 <= sub_i_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1073_reg_809 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1084_fu_285_p2 == 1'd1))) begin
        add_ln674_1_reg_875 <= add_ln674_1_fu_408_p2;
        icmp_ln1085_reg_851 <= icmp_ln1085_fu_358_p2;
        icmp_ln414_reg_880 <= icmp_ln414_fu_414_p2;
        icmp_ln674_reg_861 <= icmp_ln674_fu_378_p2;
        trunc_ln1086_reg_856 <= trunc_ln1086_fu_364_p1;
        trunc_ln414_1_reg_896 <= trunc_ln414_1_fu_424_p1;
        trunc_ln414_reg_888 <= trunc_ln414_fu_420_p1;
        trunc_ln674_reg_868 <= trunc_ln674_fu_384_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln674_1_reg_875_pp0_iter2_reg <= add_ln674_1_reg_875;
        bLast_reg_813_pp0_iter2_reg <= bLast_reg_813_pp0_iter1_reg;
        bLast_reg_813_pp0_iter3_reg <= bLast_reg_813_pp0_iter2_reg;
        icmp_ln1073_reg_809_pp0_iter2_reg <= icmp_ln1073_reg_809_pp0_iter1_reg;
        icmp_ln1084_reg_830_pp0_iter2_reg <= icmp_ln1084_reg_830;
        icmp_ln1085_reg_851_pp0_iter2_reg <= icmp_ln1085_reg_851;
        icmp_ln1104_reg_821_pp0_iter2_reg <= icmp_ln1104_reg_821_pp0_iter1_reg;
        icmp_ln1104_reg_821_pp0_iter3_reg <= icmp_ln1104_reg_821_pp0_iter2_reg;
        icmp_ln414_reg_880_pp0_iter2_reg <= icmp_ln414_reg_880;
        sub_ln674_7_reg_846_pp0_iter2_reg <= sub_ln674_7_reg_846;
        trunc_ln414_reg_888_pp0_iter2_reg <= trunc_ln414_reg_888;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1084_reg_830 == 1'd1) & (icmp_ln1073_reg_809_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln414_reg_932 <= and_ln414_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_157 <= ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_157;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_157 <= ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_157;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_157 <= ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_157;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1073_fu_224_p2 == 1'd1))) begin
        bLast_reg_813 <= bLast_fu_229_p2;
        icmp_ln1104_reg_821 <= icmp_ln1104_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bLast_reg_813_pp0_iter1_reg <= bLast_reg_813;
        icmp_ln1073_reg_809 <= icmp_ln1073_fu_224_p2;
        icmp_ln1073_reg_809_pp0_iter1_reg <= icmp_ln1073_reg_809;
        icmp_ln1104_reg_821_pp0_iter1_reg <= icmp_ln1104_reg_821;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cols_bound_per_npc_read_reg_766 <= cols_bound_per_npc_dout;
        last_blk_width_read_reg_773 <= last_blk_width_dout;
        rows_read_reg_761 <= rows_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1073_reg_809 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1084_reg_830 <= icmp_ln1084_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1073_reg_809 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1084_fu_285_p2 == 1'd0))) begin
        icmp_ln674_1_reg_834 <= icmp_ln674_1_fu_307_p2;
        sub_ln674_7_reg_846 <= sub_ln674_7_fu_341_p2;
        trunc_ln674_1_reg_840 <= trunc_ln674_1_fu_313_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1084_reg_830 == 1'd0) & (icmp_ln1073_reg_809_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln674_3_reg_902 <= lshr_ln674_3_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1084_reg_830 == 1'd1) & (icmp_ln1073_reg_809_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1085_reg_851 == 1'd0))) begin
        lshr_ln674_reg_912 <= lshr_ln674_fu_525_p2;
        sub_ln414_reg_917 <= sub_ln414_fu_531_p2;
        sub_ln674_2_reg_907 <= sub_ln674_2_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1084_reg_830 == 1'd1) & (icmp_ln1073_reg_809_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln414_reg_880 == 1'd1))) begin
        sub_ln414_1_reg_927 <= sub_ln414_1_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (bLast_reg_813_pp0_iter2_reg == 1'd1))) begin
        sub_ln674_8_reg_948 <= sub_ln674_8_fu_718_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op103_read_state6 == 1'b1))) begin
        tmp_16_reg_922 <= ldata1_dout;
    end
end

always @ (*) begin
    if ((icmp_ln1073_fu_224_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_blk_n = cols_bound_per_npc_empty_n;
    end else begin
        cols_bound_per_npc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_read = 1'b1;
    end else begin
        cols_bound_per_npc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1104_reg_821_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        imgInput_419_blk_n = imgInput_419_full_n;
    end else begin
        imgInput_419_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1104_reg_821_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        imgInput_419_write = 1'b1;
    end else begin
        imgInput_419_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        last_blk_width_blk_n = last_blk_width_empty_n;
    end else begin
        last_blk_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        last_blk_width_read = 1'b1;
    end else begin
        last_blk_width_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1084_reg_830 == 1'd1) & (icmp_ln1073_reg_809_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ldata1_blk_n = ldata1_empty_n;
    end else begin
        ldata1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op103_read_state6 == 1'b1))) begin
        ldata1_read = 1'b1;
    end else begin
        ldata1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln1073_fu_224_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln1073_fu_224_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1073_fu_214_p2 = (i_reg_146 + 31'd1);

assign add_ln1090_fu_388_p2 = ($signed(zext_ln1079_1_fu_271_p1) + $signed(6'd63));

assign add_ln1093_fu_208_p2 = (last_blk_width_cast1_cast_i_cast_cast_cast_cast_fu_193_p1 + 6'd31);

assign add_ln1105_fu_239_p2 = (j_reg_135 + 32'd1);

assign add_ln674_1_fu_408_p2 = (sub_ln674_3_fu_402_p2 + 6'd31);

assign add_ln674_fu_490_p2 = ($signed(trunc_ln674_reg_868) + $signed(6'd33));

assign and_ln414_1_fu_701_p2 = (xor_ln414_fu_696_p2 & localbuffer_V_fu_639_p3);

assign and_ln414_2_fu_707_p2 = (select_ln414_3_fu_689_p3 & and_ln414_reg_932);

assign and_ln414_fu_577_p2 = (shl_ln414_1_fu_565_p2 & lshr_ln414_1_fu_571_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln1104_reg_821_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (imgInput_419_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_predicate_op103_read_state6 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln1104_reg_821_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (imgInput_419_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_predicate_op103_read_state6 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln1104_reg_821_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (imgInput_419_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_predicate_op103_read_state6 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter2 = ((ldata1_empty_n == 1'b0) & (ap_predicate_op103_read_state6 == 1'b1));
end

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter4 = ((icmp_ln1104_reg_821_pp0_iter3_reg == 1'd1) & (imgInput_419_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_157 = 'bx;

always @ (*) begin
    ap_predicate_op103_read_state6 = ((icmp_ln1084_reg_830 == 1'd1) & (icmp_ln1073_reg_809_pp0_iter1_reg == 1'd1));
end

assign bLast_fu_229_p2 = ((j_reg_135 == sub_i_reg_789) ? 1'b1 : 1'b0);

assign grp_fu_166_p2 = (32'd32 - rem_fu_96);

assign grp_fu_171_p2 = (6'd31 - trunc_ln674_reg_868);

assign icmp_ln1073_fu_224_p2 = (($signed(zext_ln1053_fu_220_p1) < $signed(bound_reg_784)) ? 1'b1 : 1'b0);

assign icmp_ln1084_fu_285_p2 = (($signed(rem_fu_96) < $signed(zext_ln1079_fu_267_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1085_fu_358_p2 = ((rem_fu_96 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1104_fu_234_p2 = (($signed(j_reg_135) < $signed(cols_bound_per_npc_read_reg_766)) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_414_p2 = ((rem_fu_96 > sext_ln1090_fu_394_p1) ? 1'b1 : 1'b0);

assign icmp_ln674_1_fu_307_p2 = ((grp_fu_166_p2 > sub_ln1093_fu_301_p2) ? 1'b1 : 1'b0);

assign icmp_ln674_fu_378_p2 = ((tmp_fu_368_p4 != 27'd0) ? 1'b1 : 1'b0);

assign imgInput_419_din = (select_ln1078_fu_732_p3 & ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_157);

assign j_2_fu_245_p3 = ((bLast_fu_229_p2[0:0] == 1'b1) ? 32'd0 : add_ln1105_fu_239_p2);

assign last_blk_width_cast1_cast_i_cast_cast_cast_cast_fu_193_p1 = $unsigned(last_blk_width_cast1_cast_i_cast_cast_cast_fu_190_p1);

assign last_blk_width_cast1_cast_i_cast_cast_cast_fu_190_p1 = last_blk_width_read_reg_773;

assign localbuffer_V_6_fu_602_p1 = p_Result_31_fu_597_p2[23:0];

assign localbuffer_V_fu_639_p3 = ((icmp_ln1085_reg_851_pp0_iter2_reg[0:0] == 1'b1) ? 24'd0 : p_Result_28_fu_633_p2);

assign lshr_ln414_1_fu_571_p2 = 24'd16777215 >> zext_ln414_3_fu_561_p1;

assign lshr_ln414_fu_627_p2 = 24'd16777215 >> zext_ln414_fu_624_p1;

assign lshr_ln674_1_fu_609_p2 = 32'd4294967295 >> zext_ln674_1_fu_606_p1;

assign lshr_ln674_2_fu_649_p2 = 32'd4294967295 >> zext_ln674_2_fu_646_p1;

assign lshr_ln674_3_fu_474_p2 = select_ln674_4_fu_457_p3 >> zext_ln674_3_fu_470_p1;

assign lshr_ln674_4_fu_591_p2 = 32'd4294967295 >> zext_ln674_4_fu_588_p1;

assign lshr_ln674_5_fu_726_p2 = 24'd16777215 >> zext_ln674_5_fu_723_p1;

assign lshr_ln674_fu_525_p2 = select_ln674_1_fu_502_p3 >> zext_ln674_fu_521_p1;

assign p_Result_28_fu_633_p2 = (tmp_15_fu_620_p1 & lshr_ln414_fu_627_p2);

assign p_Result_29_fu_655_p2 = (tmp_16_reg_922 & lshr_ln674_2_fu_649_p2);

assign p_Result_30_fu_712_p2 = (and_ln414_2_fu_707_p2 | and_ln414_1_fu_701_p2);

assign p_Result_31_fu_597_p2 = (lshr_ln674_4_fu_591_p2 & lshr_ln674_3_reg_902);

assign p_Result_s_fu_615_p2 = (lshr_ln674_reg_912 & lshr_ln674_1_fu_609_p2);

assign ptr_width_minus_fu_275_p3 = ((bLast_reg_813[0:0] == 1'b1) ? sub4_i_reg_794 : 6'd8);

assign rem_1_fu_428_p2 = (rem_fu_96 + zext_ln1080_fu_281_p1);

assign rem_2_fu_347_p2 = (rem_fu_96 - zext_ln1079_fu_267_p1);

assign select_ln1078_fu_732_p3 = ((bLast_reg_813_pp0_iter3_reg[0:0] == 1'b1) ? lshr_ln674_5_fu_726_p2 : 24'd16777215);

assign select_ln1093_fu_291_p3 = ((bLast_reg_813[0:0] == 1'b1) ? add_ln1093_reg_799 : 6'd55);

assign select_ln414_1_fu_546_p3 = ((icmp_ln414_reg_880[0:0] == 1'b1) ? trunc_ln414_1_reg_896 : trunc_ln414_reg_888);

assign select_ln414_2_fu_664_p3 = ((icmp_ln414_reg_880_pp0_iter2_reg[0:0] == 1'b1) ? sub_ln414_1_reg_927 : trunc_ln414_reg_888_pp0_iter2_reg);

assign select_ln414_3_fu_689_p3 = ((icmp_ln414_reg_880_pp0_iter2_reg[0:0] == 1'b1) ? tmp_13_fu_679_p4 : shl_ln414_fu_673_p2);

assign select_ln414_fu_541_p3 = ((icmp_ln414_reg_880[0:0] == 1'b1) ? trunc_ln414_reg_888 : trunc_ln414_1_reg_896);

assign select_ln674_1_fu_502_p3 = ((icmp_ln674_reg_861[0:0] == 1'b1) ? tmp_9_fu_480_p4 : p_Val2_s_fu_100);

assign select_ln674_2_fu_509_p3 = ((icmp_ln674_reg_861[0:0] == 1'b1) ? grp_fu_171_p2 : trunc_ln674_reg_868);

assign select_ln674_3_fu_333_p3 = ((icmp_ln674_1_fu_307_p2[0:0] == 1'b1) ? sub_ln674_4_fu_321_p2 : sub_ln674_6_fu_327_p2);

assign select_ln674_4_fu_457_p3 = ((icmp_ln674_1_reg_834[0:0] == 1'b1) ? tmp_14_fu_442_p4 : p_Val2_s_fu_100);

assign select_ln674_5_fu_464_p3 = ((icmp_ln674_1_reg_834[0:0] == 1'b1) ? sub_ln674_5_fu_452_p2 : trunc_ln674_1_reg_840);

assign select_ln674_fu_495_p3 = ((icmp_ln674_reg_861[0:0] == 1'b1) ? add_ln674_fu_490_p2 : grp_fu_171_p2);

assign sext_ln1079_fu_263_p1 = $signed(xf_bits_per_clock_fu_257_p3);

assign sext_ln1090_fu_394_p1 = add_ln1090_fu_388_p2;

assign shl_ln414_1_fu_565_p2 = 24'd16777215 << zext_ln414_2_fu_557_p1;

assign shl_ln414_fu_673_p2 = tmp_17_fu_660_p1 << zext_ln414_1_fu_669_p1;

assign sub4_i_fu_202_p2 = ($signed(6'd32) - $signed(last_blk_width_cast1_cast_i_cast_cast_cast_cast_fu_193_p1));

assign sub_i_fu_197_p2 = ($signed(cols_bound_per_npc_read_reg_766) + $signed(32'd4294967295));

assign sub_ln1093_fu_301_p2 = (zext_ln1093_fu_297_p1 - rem_fu_96);

assign sub_ln414_1_fu_536_p2 = ($signed(5'd23) - $signed(trunc_ln414_reg_888));

assign sub_ln414_2_fu_551_p2 = ($signed(5'd23) - $signed(select_ln414_fu_541_p3));

assign sub_ln414_fu_531_p2 = ($signed(5'd24) - $signed(trunc_ln1086_reg_856));

assign sub_ln674_2_fu_515_p2 = (6'd31 - select_ln674_fu_495_p3);

assign sub_ln674_3_fu_402_p2 = ($signed(trunc_ln1090_fu_398_p1) - $signed(add_ln1090_fu_388_p2));

assign sub_ln674_4_fu_321_p2 = (trunc_ln674_1_fu_313_p1 - trunc_ln674_2_fu_317_p1);

assign sub_ln674_5_fu_452_p2 = (6'd31 - trunc_ln674_1_reg_840);

assign sub_ln674_6_fu_327_p2 = (trunc_ln674_2_fu_317_p1 - trunc_ln674_1_fu_313_p1);

assign sub_ln674_7_fu_341_p2 = (6'd31 - select_ln674_3_fu_333_p3);

assign sub_ln674_8_fu_718_p2 = ($signed(5'd24) - $signed(last_blk_width_cast1_cast_i_cast_cast_cast_reg_779));

integer ap_tvar_int_0;

always @ (shl_ln414_fu_673_p2) begin
    for (ap_tvar_int_0 = 24 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 23 - 0) begin
            tmp_13_fu_679_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_13_fu_679_p4[ap_tvar_int_0] = shl_ln414_fu_673_p2[23 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (p_Val2_s_fu_100) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            tmp_14_fu_442_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_14_fu_442_p4[ap_tvar_int_1] = p_Val2_s_fu_100[31 - ap_tvar_int_1];
        end
    end
end

assign tmp_15_fu_620_p1 = p_Result_s_fu_615_p2[23:0];

assign tmp_17_fu_660_p1 = p_Result_29_fu_655_p2[23:0];

integer ap_tvar_int_2;

always @ (p_Val2_s_fu_100) begin
    for (ap_tvar_int_2 = 32 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 31 - 0) begin
            tmp_9_fu_480_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_9_fu_480_p4[ap_tvar_int_2] = p_Val2_s_fu_100[31 - ap_tvar_int_2];
        end
    end
end

assign tmp_fu_368_p4 = {{grp_fu_166_p2[31:5]}};

assign trunc_ln1086_fu_364_p1 = rem_fu_96[4:0];

assign trunc_ln1090_fu_398_p1 = rem_fu_96[5:0];

assign trunc_ln414_1_fu_424_p1 = add_ln1090_fu_388_p2[4:0];

assign trunc_ln414_fu_420_p1 = rem_fu_96[4:0];

assign trunc_ln674_1_fu_313_p1 = grp_fu_166_p2[5:0];

assign trunc_ln674_2_fu_317_p1 = sub_ln1093_fu_301_p2[5:0];

assign trunc_ln674_fu_384_p1 = grp_fu_166_p2[5:0];

assign xf_bits_per_clock_fu_257_p3 = ((bLast_reg_813[0:0] == 1'b1) ? last_blk_width_read_reg_773 : 4'd8);

assign xor_ln414_fu_696_p2 = (24'd16777215 ^ and_ln414_reg_932);

assign zext_ln1053_fu_220_p1 = i_reg_146;

assign zext_ln1079_1_fu_271_p1 = $unsigned(sext_ln1079_fu_263_p1);

assign zext_ln1079_fu_267_p1 = $unsigned(sext_ln1079_fu_263_p1);

assign zext_ln1080_fu_281_p1 = ptr_width_minus_fu_275_p3;

assign zext_ln1093_fu_297_p1 = select_ln1093_fu_291_p3;

assign zext_ln414_1_fu_669_p1 = select_ln414_2_fu_664_p3;

assign zext_ln414_2_fu_557_p1 = select_ln414_1_fu_546_p3;

assign zext_ln414_3_fu_561_p1 = sub_ln414_2_fu_551_p2;

assign zext_ln414_fu_624_p1 = sub_ln414_reg_917;

assign zext_ln674_1_fu_606_p1 = sub_ln674_2_reg_907;

assign zext_ln674_2_fu_646_p1 = add_ln674_1_reg_875_pp0_iter2_reg;

assign zext_ln674_3_fu_470_p1 = select_ln674_5_fu_464_p3;

assign zext_ln674_4_fu_588_p1 = sub_ln674_7_reg_846_pp0_iter2_reg;

assign zext_ln674_5_fu_723_p1 = sub_ln674_8_reg_948;

assign zext_ln674_fu_521_p1 = select_ln674_2_fu_509_p3;

endmodule //median_blur_accel_AxiStream2MatStream
