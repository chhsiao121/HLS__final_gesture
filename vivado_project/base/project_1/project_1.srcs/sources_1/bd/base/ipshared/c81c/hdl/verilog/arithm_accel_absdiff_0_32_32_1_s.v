// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module arithm_accel_absdiff_0_32_32_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        imgInput1_434_dout,
        imgInput1_434_empty_n,
        imgInput1_434_read,
        imgInput2_435_dout,
        imgInput2_435_empty_n,
        imgInput2_435_read,
        imgOutput_436_din,
        imgOutput_436_full_n,
        imgOutput_436_write,
        p_src1_rows_dout,
        p_src1_rows_empty_n,
        p_src1_rows_read,
        p_src1_cols_dout,
        p_src1_cols_empty_n,
        p_src1_cols_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] imgInput1_434_dout;
input   imgInput1_434_empty_n;
output   imgInput1_434_read;
input  [7:0] imgInput2_435_dout;
input   imgInput2_435_empty_n;
output   imgInput2_435_read;
output  [7:0] imgOutput_436_din;
input   imgOutput_436_full_n;
output   imgOutput_436_write;
input  [31:0] p_src1_rows_dout;
input   p_src1_rows_empty_n;
output   p_src1_rows_read;
input  [31:0] p_src1_cols_dout;
input   p_src1_cols_empty_n;
output   p_src1_cols_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imgInput1_434_read;
reg imgInput2_435_read;
reg imgOutput_436_write;
reg p_src1_rows_read;
reg p_src1_cols_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    imgInput1_434_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln252_reg_211;
reg    imgInput2_435_blk_n;
reg    imgOutput_436_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln252_reg_211_pp0_iter1_reg;
reg    p_src1_rows_blk_n;
reg    p_src1_cols_blk_n;
reg   [15:0] j_V_reg_104;
wire   [15:0] image_width_fu_115_p1;
reg   [15:0] image_width_reg_187;
wire   [15:0] image_height_fu_119_p1;
reg   [15:0] image_height_reg_192;
wire   [12:0] i_V_1_fu_123_p2;
reg   [12:0] i_V_1_reg_197;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln878_fu_133_p2;
wire   [15:0] add_ln878_fu_138_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln252_fu_144_p2;
reg   [0:0] tmp_reg_215;
wire   [7:0] trunc_ln270_fu_171_p1;
reg   [7:0] trunc_ln270_reg_220;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [12:0] i_V_reg_93;
reg    ap_block_state1;
wire    ap_CS_fsm_state6;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] zext_ln878_fu_129_p1;
wire   [8:0] zext_ln270_fu_149_p1;
wire   [8:0] zext_ln270_1_fu_153_p1;
wire   [8:0] sub_ln270_fu_157_p2;
wire   [7:0] sub_ln270_1_fu_175_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln878_fu_133_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln878_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln878_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_V_reg_93 <= i_V_1_reg_197;
    end else if ((~((ap_start == 1'b0) | (p_src1_cols_empty_n == 1'b0) | (p_src1_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_reg_93 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln252_fu_144_p2 == 1'd0))) begin
        j_V_reg_104 <= add_ln878_fu_138_p2;
    end else if (((icmp_ln878_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_V_reg_104 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_1_reg_197 <= i_V_1_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln252_reg_211 <= icmp_ln252_fu_144_p2;
        icmp_ln252_reg_211_pp0_iter1_reg <= icmp_ln252_reg_211;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        image_height_reg_192 <= image_height_fu_119_p1;
        image_width_reg_187 <= image_width_fu_115_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln252_reg_211 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_215 <= sub_ln270_fu_157_p2[32'd8];
        trunc_ln270_reg_220 <= trunc_ln270_fu_171_p1;
    end
end

always @ (*) begin
    if ((icmp_ln252_fu_144_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln878_fu_133_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln878_fu_133_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln252_reg_211 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgInput1_434_blk_n = imgInput1_434_empty_n;
    end else begin
        imgInput1_434_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln252_reg_211 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgInput1_434_read = 1'b1;
    end else begin
        imgInput1_434_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln252_reg_211 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgInput2_435_blk_n = imgInput2_435_empty_n;
    end else begin
        imgInput2_435_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln252_reg_211 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgInput2_435_read = 1'b1;
    end else begin
        imgInput2_435_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln252_reg_211_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        imgOutput_436_blk_n = imgOutput_436_full_n;
    end else begin
        imgOutput_436_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln252_reg_211_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        imgOutput_436_write = 1'b1;
    end else begin
        imgOutput_436_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src1_cols_blk_n = p_src1_cols_empty_n;
    end else begin
        p_src1_cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_src1_cols_empty_n == 1'b0) | (p_src1_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src1_cols_read = 1'b1;
    end else begin
        p_src1_cols_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src1_rows_blk_n = p_src1_rows_empty_n;
    end else begin
        p_src1_rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_src1_cols_empty_n == 1'b0) | (p_src1_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src1_rows_read = 1'b1;
    end else begin
        p_src1_rows_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (p_src1_cols_empty_n == 1'b0) | (p_src1_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln878_fu_133_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln252_fu_144_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln252_fu_144_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln878_fu_138_p2 = (j_V_reg_104 + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln252_reg_211_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (imgOutput_436_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln252_reg_211 == 1'd0) & (imgInput1_434_empty_n == 1'b0)) | ((icmp_ln252_reg_211 == 1'd0) & (imgInput2_435_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln252_reg_211_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (imgOutput_436_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln252_reg_211 == 1'd0) & (imgInput1_434_empty_n == 1'b0)) | ((icmp_ln252_reg_211 == 1'd0) & (imgInput2_435_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln252_reg_211_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (imgOutput_436_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln252_reg_211 == 1'd0) & (imgInput1_434_empty_n == 1'b0)) | ((icmp_ln252_reg_211 == 1'd0) & (imgInput2_435_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (p_src1_cols_empty_n == 1'b0) | (p_src1_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln252_reg_211 == 1'd0) & (imgInput1_434_empty_n == 1'b0)) | ((icmp_ln252_reg_211 == 1'd0) & (imgInput2_435_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((icmp_ln252_reg_211_pp0_iter1_reg == 1'd0) & (imgOutput_436_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_V_1_fu_123_p2 = (i_V_reg_93 + 13'd1);

assign icmp_ln252_fu_144_p2 = ((j_V_reg_104 == image_width_reg_187) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_133_p2 = ((zext_ln878_fu_129_p1 < image_height_reg_192) ? 1'b1 : 1'b0);

assign image_height_fu_119_p1 = p_src1_rows_dout[15:0];

assign image_width_fu_115_p1 = p_src1_cols_dout[15:0];

assign imgOutput_436_din = ((tmp_reg_215[0:0] == 1'b1) ? sub_ln270_1_fu_175_p2 : trunc_ln270_reg_220);

assign sub_ln270_1_fu_175_p2 = (8'd0 - trunc_ln270_reg_220);

assign sub_ln270_fu_157_p2 = (zext_ln270_fu_149_p1 - zext_ln270_1_fu_153_p1);

assign trunc_ln270_fu_171_p1 = sub_ln270_fu_157_p2[7:0];

assign zext_ln270_1_fu_153_p1 = imgInput2_435_dout;

assign zext_ln270_fu_149_p1 = imgInput1_434_dout;

assign zext_ln878_fu_129_p1 = i_V_reg_93;

endmodule //arithm_accel_absdiff_0_32_32_1_s
